generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

enum Role {
  ADMIN
  MOD
  GUEST
}

enum Region {
  NORTH_AMERICA
  SOUTH_AMERICA
  EUROPE
  AFRICA
  ASIA
  OCEANIA
}

enum MatchStatus {
  ACCEPTED
  REJECTED
  PENDING_ACCEPTANCE
  IN_PROGRESS
  SCHEDULED
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  country       String?
  region        Region?
  role          Role      @default(GUEST)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  accounts          Account[]
  sessions          Session[]
  players           Player[]
  following         User[]    @relation("UserFollowers")
  followers         User[]    @relation("UserFollowers")
  tourneysOrganized Tourney[]
  matchesCreated    Match[]
}

model Player {
  id        String   @id @default(cuid())
  userId    String
  gameId    String
  username  String   @unique
  rating    Int      @default(0)
  biography String?
  anonymous Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  participations   Participation[]
  clanMemberships  ClanMember[]
  ownedClans       Clan[]
  tourneyRosters   TourneyRoster[]
  clanApplications ClanApplication[]
  clanInvites      ClanInvite[]

  @@unique([gameId, username])
}

model Game {
  id                 String   @id @default(cuid())
  name               String   @unique
  description        String?
  officialWebsiteUrl String?
  steamUrl           String?
  thumbnailUrl       String?
  backgroundUrl      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt

  matches Match[]
  players Player[]
  clans   Clan[]
}

model Match {
  id                String      @id @default(cuid())
  creatorId         String
  tourneyScheduleId String?
  gameId            String
  region            Region
  status            MatchStatus @default(ACCEPTED)
  screenshotUrl     String?
  streamUrl         String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now()) @updatedAt

  creator  User             @relation(fields: [creatorId], references: [id])
  game     Game             @relation(fields: [gameId], references: [id], onDelete: Cascade)
  schedule TourneySchedule? @relation(fields: [tourneyScheduleId], references: [id])

  teams Team[]
}

model Team {
  id        String   @id @default(cuid())
  matchId   String
  score     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  match Match @relation(fields: [matchId], references: [id])

  participations Participation[]
}

model Participation {
  id        String   @id @default(cuid())
  teamId    String
  playerId  String
  info      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
}

model Clan {
  id          String   @id @default(cuid())
  ownerId     String
  gameId      String
  name        String
  description String?
  logoUrl     String?
  region      Region
  rating      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  game  Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  owner Player @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  members      ClanMember[]
  applications ClanApplication[]
  invites      ClanInvite[]
}

model ClanMember {
  id        String   @id @default(cuid())
  label     String?
  playerId  String
  clanId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  clan   Clan   @relation(fields: [clanId], references: [id], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
}

model ClanInvite {
  id        String   @id @default(cuid())
  clanId    String
  playerId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  clan   Clan   @relation(fields: [clanId], references: [id])
  player Player @relation(fields: [playerId], references: [id])
}

model ClanApplication {
  id        String   @id @default(cuid())
  plead     String?
  clanId    String
  playerId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  clan   Clan   @relation(fields: [clanId], references: [id])
  player Player @relation(fields: [playerId], references: [id])
}

model Tourney {
  id          String   @id @default(cuid())
  organizerId String
  region      Region?
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  organizer User @relation(fields: [organizerId], references: [id])

  rosters TourneyRoster[]
}

model TourneyRoster {
  id        String   @id @default(cuid())
  tourneyId String
  name      String
  logoUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  tourney Tourney @relation(fields: [tourneyId], references: [id])

  players   Player[]
  schedules TourneySchedule[]
}

model TourneySchedule {
  id          String    @id @default(cuid())
  tourneyId   String
  successorId String
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  successor TourneySchedule @relation("PlannedTourneySchedule", fields: [successorId], references: [id])

  matches      Match[]
  rosters      TourneyRoster[]
  predecessors TourneySchedule[] @relation("PlannedTourneySchedule")
}
