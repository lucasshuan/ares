generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

enum Role {
  ADMIN
  MOD
  GUEST
}

enum Region {
  NORTH_AMERICA
  SOUTH_AMERICA
  EUROPE
  AFRICA
  ASIA
  OCEANIA
}

enum MatchStatus {
  ACCEPTED
  REJECTED
  PENDING_ACCEPTANCE
  IN_PROGRESS
  SCHEDULED
}

model Account {
  id          String   @id @default(uuid())
  googleEmail String   @unique
  country     String
  region      Region
  role        Role     @default(GUEST)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  players           Player[]
  tourneysOrganized Tourney[]
  matchesCreated    Match[]
  following         Account[] @relation("AccountFollowers")
  followers         Account[] @relation("AccountFollowers")
}

model Player {
  id        String   @id @default(uuid())
  accountId String
  gameId    String
  username  String   @unique
  rating    Int      @default(0)
  biography String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  game    Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)

  participations  Participation[]
  clanMemberships ClanMember[]
  ownedClans      Clan[]
  tourneyRosters  TourneyRoster[]

  @@unique([gameId, username])
}

model Game {
  id                 String   @id @default(uuid())
  name               String   @unique
  description        String?
  officialWebsiteUrl String?
  steamUrl           String?
  thumbnailUrl       String?
  backgroundUrl      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt

  matches Match[]
  players Player[]
  clans   Clan[]
}

model Match {
  id                String      @id @default(uuid())
  creatorId         String
  tourneyScheduleId String?
  gameId            String
  region            Region
  status            MatchStatus @default(ACCEPTED)
  screenshotUrl     String?
  streamUrl         String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now()) @updatedAt

  creator  Account          @relation(fields: [creatorId], references: [id])
  game     Game             @relation(fields: [gameId], references: [id], onDelete: Cascade)
  schedule TourneySchedule? @relation(fields: [tourneyScheduleId], references: [id])

  teams Team[]
}

model Team {
  id        String   @id @default(uuid())
  matchId   String
  score     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  match Match @relation(fields: [matchId], references: [id])

  participations Participation[]
}

model Participation {
  id        String   @id @default(uuid())
  teamId    String
  playerId  String
  info      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
}

model Clan {
  id          String   @id @default(uuid())
  ownerId     String
  gameId      String
  name        String
  description String?
  logoUrl     String?
  region      Region
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  game  Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  owner Player @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  members ClanMember[]
}

model ClanMember {
  id        String   @id @default(uuid())
  playerId  String
  clanId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  clan   Clan   @relation(fields: [clanId], references: [id], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
}

model Tourney {
  id          String   @id @default(uuid())
  organizerId String
  region      Region?
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  organizer Account @relation(fields: [organizerId], references: [id])

  rosters TourneyRoster[]
}

model TourneyRoster {
  id        String   @id @default(uuid())
  tourneyId String
  name      String
  logoUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  tourney Tourney @relation(fields: [tourneyId], references: [id])

  players   Player[]
  schedules TourneySchedule[]
}

model TourneySchedule {
  id          String    @id @default(uuid())
  tourneyId   String
  successorId String
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  successor TourneySchedule @relation("PlannedTourneySchedule", fields: [successorId], references: [id])

  matches      Match[]
  rosters      TourneyRoster[]
  predecessors TourneySchedule[] @relation("PlannedTourneySchedule")
}
