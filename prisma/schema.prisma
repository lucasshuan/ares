generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

enum Role {
  ADMIN
  MOD
  GUEST
}

enum Region {
  NorthAmerica
  SouthAmerica
  Europe
  Africa
  Asia
  Oceania
}

enum MatchMode {
  DUEL
  TEAM
}

enum MatchStatus {
  ACCEPTED
  REJECTED
  PENDING
}

model Account {
  id          String   @id @unique @default(uuid())
  googleEmail String   @unique
  region      Region
  country     String
  role        Role     @default(GUEST)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  players Player[]

  @@map("accounts")
}

model Player {
  id        String   @id @unique @default(uuid())
  accountId String
  gameId    String
  username  String
  rating    Float    @default(1000)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  game    Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)

  participations  PlayerParticipation[]
  teamMemberships TeamMember[]

  @@unique([gameId, username])
  @@map("players")
}

model Team {
  id        String   @id @unique @default(uuid())
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  members        TeamMember[]
  participations TeamParticipation[]
  TourneySeed    TourneySeed[]

  @@map("teams")
}

model TeamMember {
  id        String   @id @unique @default(uuid())
  name      String
  playerId  String
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("team_members")
}

model Game {
  id                 String   @id @unique @default(uuid())
  name               String   @unique
  description        String?
  officialWebsiteUrl String?
  steamUrl           String?
  thumbnailUrl       String?
  backgroundUrl      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt

  matches Match[]
  players Player[]

  @@map("games")
}

model Match {
  id            String      @id @unique @default(uuid())
  gameId        String
  region        Region
  status        MatchStatus @default(ACCEPTED)
  screenshotUrl String?
  streamUrl     String?
  mode          MatchMode   @default(DUEL)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  teamParticipations   TeamParticipation[]
  playerParticipations PlayerParticipation[]

  @@map("matches")
}

model PlayerParticipation {
  id        String   @id @unique @default(uuid())
  playerId  String
  matchId   String
  score     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  match  Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@map("player_participations")
}

model TeamParticipation {
  id        String   @id @unique @default(uuid())
  teamId    String
  matchId   String
  score     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  team  Team  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@map("team_participations")
}

model Tourney {
  id            String   @id @unique @default(uuid())
  gameId        String
  name          String
  description   String?
  thumbnailUrl  String?
  teamMinLength Int      @default(1)
  teamMaxLength Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  tourneySeeds TourneySeed[]

  @@map("tourneys")
}

model TourneySeed {
  id        String   @id @unique @default(uuid())
  tourneyId String
  teamId    String
  name      String
  value     Int
  phase     Int      @default(0)
  loser     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  tourney Tourney @relation(fields: [tourneyId], references: [id], onDelete: Cascade)
  team    Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("tourney_seeds")
}
